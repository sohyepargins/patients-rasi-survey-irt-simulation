x2<-mvrnorm(1000, mu, Sigma=sigma)
e<-rt(1000, df=3)
y=1+1*x1+1*x2+(0.3)*e
#computation w/ simulated data
fit =lm(y~x1+x2)
coef.matrix[r,]=coef(fit)
sigma.vec[r]=sigma(fit)/sqrt(3)
}
set.seed(123)
coef.matrix=matrix(0,1000,3)
sigma.vec=numeric(1000)
mu<- c(0, 0)
sigma <- matrix(c(1,0.6,0.6,1),2,2)
for(r in 1:1000){
X<-mvrnorm(1000, mu, Sigma=sigma)
e<-rt(1000, df=3)
y=1+1*X[,1]+1*X[,2]+(0.3)*e
#computation w/ simulated data
fit =lm(y~X[,1]+X[,2])
coef.matrix[r,]=coef(fit)
sigma.vec[r]=sigma(fit)/sqrt(3)
}
for(r in 1:1000){
X<-mvrnorm(1000, mu, Sigma=sigma)
stop()
e<-rt(1000, df=3)
y=1+1*X[,1]+1*X[,2]+(0.3)*e
#computation w/ simulated data
fit =lm(y~X[,1]+X[,2])
coef.matrix[r,]=coef(fit)
sigma.vec[r]=sigma(fit)/sqrt(3)
}
X
for(r in 1:1000){
X<-mvrnorm(1000, mu, Sigma=sigma)
e<-rt(1000, df=3)
stop()
y=1+1*X[,1]+1*X[,2]+(0.3)*e
#computation w/ simulated data
fit =lm(y~X[,1]+X[,2])
coef.matrix[r,]=coef(fit)
sigma.vec[r]=sigma(fit)/sqrt(3)
}
e
setwd("/Users/sohyepark/Rfiles/rfiles>edms787")
setwd("/Users/sohyepark/Rfiles/rfiles>edms787")
dat <- read.csv("logistic.csv")
setwd("/Users/sohyepark/Rfiles/rfiles>edms787")
setwd("/Users/sohyepark/Rfiles/rfiles>edms787")
setwd("/Users/sohyepark/Rfiles/rfiles/edms787/project")
library(plyr)
require(rjags)
library(sfsmisc) # For PPC
rasi <- read.csv("rasionly2.csv", header = T)
#rasi<-data.matrix(data.frame(lapply(rasi, ordered, levels= c("Never", "Rarely", "Sometimes", "A lot", "Always"))))
n <- nrow(rasi)
m <- ncol(rasi)
K<-apply(rasi, 2, max)
2.5^(-2)
0.5^(-2)
init <- list(
list('kappa.star' = matrix(rnorm(14*4), 14,4),
.RNG.name = "base::Mersenne-Twister", .RNG.seed = 498),
list('kappa.star' = matrix(rnorm(14*4), 14,4),
.RNG.name = "base::Mersenne-Twister", .RNG.seed = 502),
list('kappa.star' = matrix(rnorm(14*4), 14,4),
.RNG.name = "base::Mersenne-Twister", .RNG.seed = 504)
)
kappa <- t(sapply(1:m, function(j) c(rep(NA, K[j]-1), rep(0.0, max(K) - K[j]))))
mod.grm3 <- jags.model("grm3.jags",
data = list('Y' = rasi,
'n' = n,
'm' = m,
'K' = K,
'kappa' = kappa),
init=init,
n.chains = 3, n.adapt = 5000)
update(mod.grm3, n.iter = 10000) #burn in
result.grm3 <- coda.samples(mod.grm3,
variable.names = c('alpha', 'theta', 'kappa'),
n.iter = 10000, thin = 1)
plot(result.grm3, density =F)
mod.grm3 <- jags.model("grm3.jags",
data = list('Y' = rasi,
'n' = n,
'm' = m,
'K' = K,
'kappa' = kappa),
init=init,
n.chains = 3, n.adapt = 5000)
update(mod.grm3, n.iter = 7000) #burn in
result.grm3 <- coda.samples(mod.grm3,
variable.names = c('alpha', 'theta', 'kappa'),
n.iter = 10000, thin = 1)
summary(result.grm3["alpha[]"])
plot(result.grm3, density =F)
gelman.plot(result.grm3)
gelman.diag(result.grm3)
mod.grm3 <- jags.model("grm3.jags",
data = list('Y' = rasi,
'n' = n,
'm' = m,
'K' = K,
'kappa' = kappa),
init=init,
n.chains = 3, n.adapt = 4000)
update(mod.grm3, n.iter = 5000) #burn in
result.grm3 <- coda.samples(mod.grm3,
variable.names = c('alpha', 'theta', 'kappa'),
n.iter = 10000, thin = 10)
gelman.diag(result.grm3) #PSRF
summary(result.grm3)
setwd("/Users/sohyepark/Rfiles/rfiles/edms787/project")
library(plyr)
require(rjags)
library(sfsmisc) # For PPC
#-------------------------------------------------------------------------------
# Graded model
#-------------------------------------------------------------------------------
# rasi data
rasi <- read.csv("rasionly2.csv", header = T)
#rasi<-data.matrix(data.frame(lapply(rasi, ordered, levels= c("Never", "Rarely", "Sometimes", "A lot", "Always"))))
n <- nrow(rasi)
m <- ncol(rasi)
K<-apply(rasi, 2, max)
2.5^(-2)
0.5^(-2)# SD = .5 <=> Tau = 4
# model fitting
init <- list(
list('kappa.star' = matrix(rnorm(14*4), 14,4),
.RNG.name = "base::Mersenne-Twister", .RNG.seed = 498),
list('kappa.star' = matrix(rnorm(14*4), 14,4),
.RNG.name = "base::Mersenne-Twister", .RNG.seed = 502),
list('kappa.star' = matrix(rnorm(14*4), 14,4),
.RNG.name = "base::Mersenne-Twister", .RNG.seed = 504)
)
kappa <- t(sapply(1:m, function(j) c(rep(NA, K[j]-1), rep(0.0, max(K) - K[j]))))
mod.grm3 <- jags.model("grm3.jags",
data = list('Y' = rasi,
'n' = n,
'm' = m,
'K' = K,
'kappa' = kappa),
init=init,
n.chains = 3, n.adapt = 4000)
update(mod.grm3, n.iter = 10000) #burn in
result.grm3 <- coda.samples(mod.grm3,
variable.names = c('alpha', 'theta', 'kappa'),
n.iter = 10000, thin = 1)
gelman.diag(result.grm3) #PSRF
summary(result.grm3)
plot(result.grm3, density =F)
post.draws = as.matrix(result.grm3)
kappalist <- function(v) {
## Creates a list of kappa values from a vector of BUGS output
p <- max(as.numeric(gsub("(kappa\\[|,[[:digit:]]+\\])", "", grep("kappa", names(v), value=TRUE))))
lapply(1:p, function(j) v[grep(paste("kappa\\[", j, ",[[:digit:]]+\\]", sep=""), names(v))])
}
newdata <- function(theta, alpha, kappa){
## Generates a new data set from a graded response model
## theta = vector (length n) of "ability" values
## alpha = vector (length p) of discrimination parameters
##         or a single value (vector of length 1)
## kappa = a list of kappa values
n <- length(theta)
p <- length(kappa)
Ystar <- t(sapply(theta, function(th) rlogis(p, alpha*th, 1.0)))
Y <- t(apply(Ystar, 1, function(y) sapply(seq(p), function(j) cut(y[j], breaks=c(-Inf, kappa[[j]], Inf), labels=FALSE))))
dimnames(Y) <- NULL
return(Y)
}
ppktau <- function(sims){
require(plyr)
parnames <- colnames(sims)
dumfun <- function(v){
theta <- v[grep("theta", parnames)]
alpha <- v[grep("alpha", parnames)]
kappa <- kappalist(v)
p <- length(kappa)
out <- cor(newdata(theta, alpha, kappa), method="kendall")[lower.tri(diag(p))]
return(out)
}
out <- adply(sims, 1, dumfun, .progress="text")
return(out[,-1])
}
densityShade <- function(x, from, to, col=rgb(0.5, 0.5, 0.5, 0.5), border=NA, ...){
den <- density(x)
from <- max(from, min(den$x))
to <- min(to, max(den$x))
den <- density(x, from=from, to=to)
x <- den$x
y <- den$y
xx <- c(x, rev(x))
yy <- c(y, rep(0, times=length(x)))
polygon(xx, yy, col=col, border=border, ...)
}
makeNames <- function(name, ..., symmetric.matrix=FALSE, diag=TRUE){
if (symmetric.matrix){
idx <- which(upper.tri(diag(max(...)), diag=diag), arr.ind=TRUE)
} else {
idx <- expand.grid(rev(list(...)))
}
name <- paste(name, "[", sep="")
if (ncol(idx)>1){
for (j in ncol(idx):2){
name <- paste(name, idx[,j], ",", sep="")
}
}
name <- paste(name, idx[,1], "]", sep="")
return(name)
}
plotpppval <- function(sims, true, xlim=NULL){
if (!is.matrix(sims))
sims <- as.matrix(sims)
npar <- ncol(sims)
##mult.fig(npar, mar=c(3, 1.0, 1.0, 1.0), oma=rep(0, 4))
mult.fig(npar, mar=c(2.5, 0.25, 0.25, 0.25), oma=rep(0, 4))
den <- apply(sims, 2, density)
if (is.null(xlim)){
xl <- range(as.vector(sapply(den, function(d) range(d$x))))
xl <- xl + c(-1, 1)*0.04*diff(xl)
}
else xl <- xlim
ylmax <- max(sapply(den, function(d) max(d$y)))
yl <- c(0, 1.04*ylmax)
for(i in 1:npar){
plot(density(sims[,i]), xlim=xl, ylim=yl, tcl=-0.2, mgp=c(1, 0.1, 0.0), xlab=colnames(sims)[i], ylab="", bty="n", yaxt="n", main="")
if (mean(true[i]<sims[,i])>0.5){
from <- -Inf
to <- true[i]
pval <- formatC(mean(true[i]>sims[,i]), digits=2, format="f")
}
else{
from <- true[i]
to <- Inf
pval <- formatC(mean(true[i]<sims[,i]), digits=2, format="f")
}
densityShade(sims[,i],from=from, to=to)
text(xl[1], 0.75*ylmax, labels=pval, pos=4)
##abline(v=true[i], col="red")
}
}
acfplot(result.grm3[,51])
effectiveSize(result.grm3)
post.draws = as.matrix(result.grm3)
pp.eq<-ppktau(post.draws)
post.draws = as.matrix(result.grm3)
kappalist <- function(v) {
## Creates a list of kappa values from a vector of BUGS output
p <- max(as.numeric(gsub("(kappa\\[|,[[:digit:]]+\\])", "", grep("kappa", names(v), value=TRUE))))
lapply(1:p, function(j) v[grep(paste("kappa\\[", j, ",[[:digit:]]+\\]", sep=""), names(v))])
}
newdata <- function(theta, alpha, kappa){
## Generates a new data set from a graded response model
## theta = vector (length n) of "ability" values
## alpha = vector (length p) of discrimination parameters
##         or a single value (vector of length 1)
## kappa = a list of kappa values
n <- length(theta)
p <- length(kappa)
Ystar <- t(sapply(theta, function(th) rlogis(p, alpha*th, 1.0)))
Y <- t(apply(Ystar, 1, function(y) sapply(seq(p), function(j) cut(y[j], breaks=c(-Inf, kappa[[j]], Inf), labels=FALSE))))
dimnames(Y) <- NULL
return(Y)
}
ppktau <- function(sims){
require(plyr)
parnames <- colnames(sims)
dumfun <- function(v){
theta <- v[grep("theta", parnames)]
alpha <- v[grep("alpha", parnames)]
kappa <- kappalist(v)
p <- length(kappa)
out <- cor(newdata(theta, alpha, kappa), method="kendall")[lower.tri(diag(p))]
return(out)
}
out <- adply(sims, 1, dumfun, .progress="text")
return(out[,-1])
}
densityShade <- function(x, from, to, col=rgb(0.5, 0.5, 0.5, 0.5), border=NA, ...){
den <- density(x)
from <- max(from, min(den$x))
to <- min(to, max(den$x))
den <- density(x, from=from, to=to)
x <- den$x
y <- den$y
xx <- c(x, rev(x))
yy <- c(y, rep(0, times=length(x)))
polygon(xx, yy, col=col, border=border, ...)
}
makeNames <- function(name, ..., symmetric.matrix=FALSE, diag=TRUE){
if (symmetric.matrix){
idx <- which(upper.tri(diag(max(...)), diag=diag), arr.ind=TRUE)
} else {
idx <- expand.grid(rev(list(...)))
}
name <- paste(name, "[", sep="")
if (ncol(idx)>1){
for (j in ncol(idx):2){
name <- paste(name, idx[,j], ",", sep="")
}
}
name <- paste(name, idx[,1], "]", sep="")
return(name)
}
plotpppval <- function(sims, true, xlim=NULL){
if (!is.matrix(sims))
sims <- as.matrix(sims)
npar <- ncol(sims)
##mult.fig(npar, mar=c(3, 1.0, 1.0, 1.0), oma=rep(0, 4))
mult.fig(npar, mar=c(2.5, 0.25, 0.25, 0.25), oma=rep(0, 4))
den <- apply(sims, 2, density)
if (is.null(xlim)){
xl <- range(as.vector(sapply(den, function(d) range(d$x))))
xl <- xl + c(-1, 1)*0.04*diff(xl)
}
else xl <- xlim
ylmax <- max(sapply(den, function(d) max(d$y)))
yl <- c(0, 1.04*ylmax)
for(i in 1:npar){
plot(density(sims[,i]), xlim=xl, ylim=yl, tcl=-0.2, mgp=c(1, 0.1, 0.0), xlab=colnames(sims)[i], ylab="", bty="n", yaxt="n", main="")
if (mean(true[i]<sims[,i])>0.5){
from <- -Inf
to <- true[i]
pval <- formatC(mean(true[i]>sims[,i]), digits=2, format="f")
}
else{
from <- true[i]
to <- Inf
pval <- formatC(mean(true[i]<sims[,i]), digits=2, format="f")
}
densityShade(sims[,i],from=from, to=to)
text(xl[1], 0.75*ylmax, labels=pval, pos=4)
##abline(v=true[i], col="red")
}
}
pp.eq<-ppktau(post.draws)
colnames(pp.eq)<-makeNames("ktau", 1:14, 1:14, symmetric.matrix = TRUE, diag = FALSE)
ktau<-cor(rasi, method="kendall")[lower.tri(diag(m))]
plotpppval(pp.eq,ktau)
setwd("/Users/sohyepark/Rfiles/rfiles/edms787/project")
library(plyr)
require(rjags)
library(sfsmisc) # F
rasi <- read.csv("rasionly2.csv", header = T)
#rasi<-data.matrix(data.frame(lapply(rasi, ordered, levels= c("Never", "Rarely", "Sometimes", "A lot", "Always"))))
n <- nrow(rasi)
m <- ncol(rasi)
K<-apply(rasi, 2, max)
init <- list(
list('kappa.star' = matrix(rnorm(14*4), 14,4),
.RNG.name = "base::Mersenne-Twister", .RNG.seed = 498),
list('kappa.star' = matrix(rnorm(14*4), 14,4),
.RNG.name = "base::Mersenne-Twister", .RNG.seed = 502),
list('kappa.star' = matrix(rnorm(14*4), 14,4),
.RNG.name = "base::Mersenne-Twister", .RNG.seed = 504)
)
kappa <- t(sapply(1:m, function(j) c(rep(NA, K[j]-1), rep(0.0, max(K) - K[j]))))
mod.grm4 <- jags.model("grm4.jags",
data = list('Y' = rasi,
'n' = n,
'm' = m,
'K' = K,
'kappa' = kappa),
init=init,
n.chains = 3, n.adapt = 4000)
update(mod.grm4, n.iter = 5000) #burn in
result.grm4 <- coda.samples(mod.grm4,
variable.names = c('alpha', 'theta', 'kappa'),
n.iter = 5000, thin = 1)
summary(result.grm4)
gelman.diag(result.grm4) #PSRF
summary(result.grm4)
effectiveSize(result.grm4)
plot(result.grm4[,1:14])
plot(result.grm4[,1:14], density=F)
dev.new()
dev.new()
plot(result.grm4[,1:14], density=F)
windows(10,10)
plot(result.grm4[,1:14], density=F)
dev.off()
plot(result.grm4[,1:14], density=F)
dev.off()
plot(result.grm4[,1:14], density=F)
plot(result.grm4[,15:28], density=F)
plot(result.grm4[,29:42], density=F)
plot(result.grm4[,43:56], density=F)
plot(result.grm4[,57:70], density=F)
acfplot(result.grm4[,1:7])
acfplot(result.grm4[,8:14]
acfplot(result.grm4[,8:14])
acfplot(result.grm4[,15:21])
acfplot(result.grm4[,22:28])
acfplot(result.grm4[,29:35])
acfplot(result.grm4[,36:42])
acfplot(result.grm4[,43:49])
acfplot(result.grm4[,50:56])
acfplot(result.grm4[,57:63])
acfplot(result.grm4[,64:70])
post.draws1 = as.matrix(result.grm4)
kappalist <- function(v) {
## Creates a list of kappa values from a vector of BUGS output
p <- max(as.numeric(gsub("(kappa\\[|,[[:digit:]]+\\])", "", grep("kappa", names(v), value=TRUE))))
lapply(1:p, function(j) v[grep(paste("kappa\\[", j, ",[[:digit:]]+\\]", sep=""), names(v))])
}
newdata <- function(theta, alpha, kappa){
## Generates a new data set from a graded response model
## theta = vector (length n) of "ability" values
## alpha = vector (length p) of discrimination parameters
##         or a single value (vector of length 1)
## kappa = a list of kappa values
n <- length(theta)
p <- length(kappa)
Ystar <- t(sapply(theta, function(th) rlogis(p, alpha*th, 1.0)))
Y <- t(apply(Ystar, 1, function(y) sapply(seq(p), function(j) cut(y[j], breaks=c(-Inf, kappa[[j]], Inf), labels=FALSE))))
dimnames(Y) <- NULL
return(Y)
}
ppktau <- function(sims){
require(plyr)
parnames <- colnames(sims)
dumfun <- function(v){
theta <- v[grep("theta", parnames)]
alpha <- v[grep("alpha", parnames)]
kappa <- kappalist(v)
p <- length(kappa)
out <- cor(newdata(theta, alpha, kappa), method="kendall")[lower.tri(diag(p))]
return(out)
}
out <- adply(sims, 1, dumfun, .progress="text")
return(out[,-1])
}
densityShade <- function(x, from, to, col=rgb(0.5, 0.5, 0.5, 0.5), border=NA, ...){
den <- density(x)
from <- max(from, min(den$x))
to <- min(to, max(den$x))
den <- density(x, from=from, to=to)
x <- den$x
y <- den$y
xx <- c(x, rev(x))
yy <- c(y, rep(0, times=length(x)))
polygon(xx, yy, col=col, border=border, ...)
}
makeNames <- function(name, ..., symmetric.matrix=FALSE, diag=TRUE){
if (symmetric.matrix){
idx <- which(upper.tri(diag(max(...)), diag=diag), arr.ind=TRUE)
} else {
idx <- expand.grid(rev(list(...)))
}
name <- paste(name, "[", sep="")
if (ncol(idx)>1){
for (j in ncol(idx):2){
name <- paste(name, idx[,j], ",", sep="")
}
}
name <- paste(name, idx[,1], "]", sep="")
return(name)
}
plotpppval <- function(sims, true, xlim=NULL){
if (!is.matrix(sims))
sims <- as.matrix(sims)
npar <- ncol(sims)
##mult.fig(npar, mar=c(3, 1.0, 1.0, 1.0), oma=rep(0, 4))
mult.fig(npar, mar=c(2.5, 0.25, 0.25, 0.25), oma=rep(0, 4))
den <- apply(sims, 2, density)
if (is.null(xlim)){
xl <- range(as.vector(sapply(den, function(d) range(d$x))))
xl <- xl + c(-1, 1)*0.04*diff(xl)
}
else xl <- xlim
ylmax <- max(sapply(den, function(d) max(d$y)))
yl <- c(0, 1.04*ylmax)
for(i in 1:npar){
plot(density(sims[,i]), xlim=xl, ylim=yl, tcl=-0.2, mgp=c(1, 0.1, 0.0), xlab=colnames(sims)[i], ylab="", bty="n", yaxt="n", main="")
if (mean(true[i]<sims[,i])>0.5){
from <- -Inf
to <- true[i]
pval <- formatC(mean(true[i]>sims[,i]), digits=2, format="f")
}
else{
from <- true[i]
to <- Inf
pval <- formatC(mean(true[i]<sims[,i]), digits=2, format="f")
}
densityShade(sims[,i],from=from, to=to)
text(xl[1], 0.75*ylmax, labels=pval, pos=4)
##abline(v=true[i], col="red")
}
}
pp.eq1<-ppktau(post.draws1)
require(mirt)
library(psych)
setwd("/Users/sohyepark/Rfiles/rfiles/edms787/project")
niddk <- read.csv("rasi.csv", header=T)
rasidat <- read.csv("rasionly2.csv", header=T)
mod.rasi <- mirt(rasidat, 1L, SE = T)
coef(mod.rasi, IRTpars=TRUE, simplify=TRUE)
residuals(mod.rasi, type='LD')
itemplot(mod.rasi, item = 10, type = "info", theta_lim = c(-4, 4))
itemplot(mod.rasi, item = 11, type = "info", theta_lim = c(-4, 4))
itemplot(mod.rasi, item = 3, type = "info", theta_lim = c(-4, 4))
itemplot(mod.rasi, item = 11, type = "info", theta_lim = c(-4, 4))
itemplot(mod.rasi, item = 4, type = "info", theta_lim = c(-4, 4))
itemplot(mod.rasi, item = 12, type = "info", theta_lim = c(-4, 4))
itemplot(mod.rasi, item = 9, type = "info", theta_lim = c(-4, 4))
itemplot(mod.rasi, item = 1, type = "info", theta_lim = c(-4, 4))
itemplot(mod.rasi, item = 9, type = "info", theta_lim = c(-4, 4))
itemplot(mod.rasi, item = 1, type = "info", theta_lim = c(-4, 4))
35/91
9/91
setwd("/Users/sohyepark/Rfiles/rfiles/edms787/project/acculturative-survey-irt-simulation")
